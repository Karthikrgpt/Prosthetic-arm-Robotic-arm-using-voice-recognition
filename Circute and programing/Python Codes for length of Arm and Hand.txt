-------------------------------------------------------------------------------------------------------------------------------------
Hand Lenght :
-------------------------------------------------------------------------------------------------------------------------------------

Software : Pycharm

supportive files/drivers : OpenCV, CVzone, Medeapipe
sub-files : Hand trcking Module

--------------------------------------
Codes     
--------------------------------------

import math
import cv2
from cvzone.HandTrackingModule import *
import numpy as np
import cvzone
import mediapipe as mp

#setup
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_pose = mp.solutions.pose

#webcam
cap = cv2.VideoCapture(0)
cap.set(3, 1288)
cap.set(4, 720)

#Hand and pose detector
detector = HandDetector(detectionCon=0.8, maxHands=2, minTrackCon=0.5 )

#loop
while True:
    success, img = cap.read()
    hands, img = detector.findHands(img)

    if hands:

        lmList = hands[0]['lmList']
        x, y, w, h = hands[0]['bbox']
        x0, y0, z0 = lmList[5]
        x1, y1, z1 = lmList[17]
        x2, y2, z2 = lmList[0]
        x3, y3, z3 = lmList[12]

        d1 = math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2 + (z0 - z1) ** 2 )/17.16
        d2 = math.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2 + (z2 - z3) ** 2 )/17.16

        # displaying values
        cvzone.putTextRect(img, f'{int(d1)} cm', (x+200, y))
        cvzone.putTextRect(img, f'{int(d2)} cm', (x+200, y - 50))
        print(int(d1),int(d2))

    cv2.imshow("Image", img)
    cv2.waitKey(1)


-------------------------------------------------------------------------------------------------------------------------------------
Arm Length(Elbow to wrist) :
-------------------------------------------------------------------------------------------------------------------------------------

Software : Pycharm

supportive files/drivers : OpenCV, CVzone, Medeapipe
sub-files : Pose detection module

--------------------------------------
Codes     
--------------------------------------
import calendar
import math
import cv2
import mediapipe.python.solutions.pose
import numpy as np
import cvzone
import mediapipe as mp
#from cvzone.PoseModule import *
import cvzone.PoseModule as pm

#webcam
cap = cv2.VideoCapture(0)
cap.set(3, 1288)
cap.set(4, 720)

#pose detector
detector = pm.PoseDetector()

#setup
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_pose = mp.solutions.pose

#loop
while True:
    success, img = cap.read()
    img = detector.findPose(img,draw=False)
    lmList = detector.findPosition(img,draw=False)

    if len(lmList) != 0:
        h0, x0, y0, z0 = detector.lmList[13]    #Left elbow
        h1, x1, y1, z1 = detector.lmList[15]    #Left Wrist
        h2, x2, y2, z2 = detector.lmList[14]    #Right elbow
        h3, x3, y3, z3 = detector.lmList[16]    #Right wrist

        d1 = math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2 + (z0 - z1) ** 2)/17.16
        d2 = math.sqrt((x2 - x3) ** 2 + (y2 - y3) ** 2 + (z2 - z3) ** 2)/17.16

        print(d1, d2)
        cv2.rectangle(img, (0, 0), (620, 150), (245, 117, 16), -1)

        #Display values of d1 and d2
        cv2.putText(img, str(int(d1)),(10, 60),cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)
        cv2.putText(img, str(int(d2)),(10, 130),cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)

        #Display data left arm pr right arm)
        cv2.putText(img, 'cm - Left arm',(90, 60),cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)
        cv2.putText(img, 'cm - Right arm', (90, 130), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)


    cv2.imshow("Image", img)
    cv2.waitKey(1)





